{
	"id": "9b55a8ebdaff6cbd24830540006ebd32",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"7integers.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.5.0 <0.9.0;\r\n\r\n\r\n\r\n//INTEGERS\r\n//Two types of integer are present in solidity    int  and   uint(unsigned integer)\r\n//integer can store both negative and posiitive value\r\n//onlyy positive value in uint integer\r\n//int size---->8bit to 256bit\r\n//uint size---->8bit to 256bit\r\n//int alias to int256    .it means if we write int ,it means we are using int256\r\n//uint alias to uint256    .it means if we write uint ,it means we are using uint 256\r\n//if we want to specify like int8 ,  uint8  ,   int16  ,  unit16\r\n//by default int and uint is initializes to 0\r\n\r\n//There is no concept of Null in solidity\r\n\r\n\r\n\r\n\r\n\r\n//RANGE\r\n//   int8= -128 to +127            uint8= 0 to 255\r\n//   int8= 32768 to 32767         uint8= 0 to 65535\r\n\r\n\r\n\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"sources": {
			"7integers.sol": {
				"ast": {
					"absolutePath": "7integers.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:31:0"
						}
					],
					"src": "37:751:0"
				},
				"id": 0
			}
		}
	}
}